"""Add initial tables

Revision ID: bc7a23024fbf
Revises: 
Create Date: 2025-01-23 21:56:42.690203

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bc7a23024fbf'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='releasestatus').create(op.get_bind())
    sa.Enum('NOT_SENT', 'SENT', 'HAD_ERROR', name='invitationemailstatus').create(op.get_bind())
    sa.Enum('ACTIVE', 'EXPRIED', 'USED', name='invitationstatus').create(op.get_bind())
    sa.Enum('UPCOMING', 'OPEN', 'ONGOING', 'COMPLETED', name='competitionstatus').create(op.get_bind())
    op.create_table('teams',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('competition_id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('github_repo', sa.String(), nullable=False),
    sa.Column('registration_date', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], use_alter=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('competition_id', 'name'),
    sa.UniqueConstraint('github_repo')
    )
    op.create_table('competitions',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('status', postgresql.ENUM('UPCOMING', 'OPEN', 'ONGOING', 'COMPLETED', name='competitionstatus', create_type=False), nullable=False),
    sa.Column('winner_team_id', sa.Uuid(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['winner_team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('releases',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('commit_id', sa.String(), nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'APPROVED', 'REJECTED', name='releasestatus', create_type=False), nullable=False),
    sa.Column('message', sa.String(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('release_date', sa.DateTime(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('commit_id')
    )
    op.create_table('users',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('competition_id', sa.Uuid(), nullable=False),
    sa.Column('github_username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('username', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('registration_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['competition_id'], ['competitions.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('competition_id', 'email'),
    sa.UniqueConstraint('competition_id', 'github_username'),
    sa.UniqueConstraint('competition_id', 'username'),
    sa.UniqueConstraint('password')
    )
    op.create_table('invitations',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('invitation_code', sa.String(), nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'EXPRIED', 'USED', name='invitationstatus', create_type=False), nullable=False),
    sa.Column('invitation_email_status', postgresql.ENUM('NOT_SENT', 'SENT', 'HAD_ERROR', name='invitationemailstatus', create_type=False), nullable=False),
    sa.Column('expiration_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('invitation_code'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('team_user',
    sa.Column('team_id', sa.Uuid(), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('team_id', 'user_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('team_user')
    op.drop_table('invitations')
    op.drop_table('users')
    op.drop_table('releases')
    op.drop_table('competitions')
    op.drop_table('teams')
    sa.Enum('UPCOMING', 'OPEN', 'ONGOING', 'COMPLETED', name='competitionstatus').drop(op.get_bind())
    sa.Enum('ACTIVE', 'EXPRIED', 'USED', name='invitationstatus').drop(op.get_bind())
    sa.Enum('NOT_SENT', 'SENT', 'HAD_ERROR', name='invitationemailstatus').drop(op.get_bind())
    sa.Enum('PENDING', 'APPROVED', 'REJECTED', name='releasestatus').drop(op.get_bind())
    # ### end Alembic commands ###
